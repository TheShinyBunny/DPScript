package com.shinysponge.dpscript.pawser;

import com.shinysponge.dpscript.pawser.parsers.SelectorMember;
import com.shinysponge.dpscript.tokenizew.Token;
import com.shinysponge.dpscript.tokenizew.TokenIterator;
import com.shinysponge.dpscript.tokenizew.TokenType;

import java.time.Duration;
import java.util.*;
import java.util.function.BiConsumer;
import java.util.function.Consumer;
import java.util.stream.Collectors;

/**
 * This is a vewy kewl pawsew by pwetty
 */
public class Parser {

    private ScopeType scope;
    private TokenIterator tokens;
    private List<String> tickCommands;
    private Map<String, List<String>> functions = new HashMap<>();
    private Map<String, Integer> consts = new HashMap<>();
    private List<String> globals = new ArrayList<>();
    private int autoGenerated = 1;

    private List<SelectorMember> selectorMembers = new ArrayList<>();
    private Map<String,VariableType> variables = new HashMap<>();

    /**
     * Constwuctow is cool
     * but not really
     * Destwuctow is better
     * but im just kiddin
     * it sux
     * and so does resdsponge
     */
    public Parser(TokenIterator tokens) {
        this.tokens = tokens;
        this.scope = ScopeType.GLOBAL;
        this.tickCommands = new ArrayList<>();

        addSelectorMember((selector,cmds)->{
            tokens.expect('(');
            String effect = parseResourceLocation(false);
            int tier = -1;
            if (tokens.isNext(TokenType.IDENTIFIER)) {
                tier = readRomanNumber(tokens.nextValue()) - 1;
            } else if (tokens.isNext(TokenType.INT)) {
                tier = Integer.parseInt(tokens.nextValue());
            }
            long seconds = -1;
            if (tokens.skip(",")) {
                seconds = parseDuration().getSeconds();
            }
            tokens.expect(')');
            boolean hide = tokens.skip("hide");
            if (!hide && seconds < 0 && tier < 0 && tokens.skip("clear","remove","cure")) {
                cmds.accept("effect clear " + selector + " " + effect);
            } else if (seconds > 0 || hide || tier >= 0) {
                if (tier < 0) tier = 0;
                if (seconds < 0) seconds = 30;
                cmds.accept("effect give " + selector + " " + effect + " " + seconds + " " + tier + " " + hide);
            } else {
                cmds.accept("effect give " + selector + " " + effect);
            }
        },"effect");
        addSelectorMember((selector, cmds) -> {
            String command = tokens.previous();
            tokens.expect('(');
            String method = "only";
            boolean addCriterion = true;
            if (tokens.skip("all","everything")) {
                tokens.expect(')');
                cmds.accept("advancement " + command + " " + selector + " everything");
                return;
            }
            if (tokens.isNext("from","until")) {
                method = tokens.expect("from","until");
                addCriterion = false;
            } else {
                tokens.skip("only");
            }
            String adv = parseResourceLocation(false);

            String criterion = "";
            if (addCriterion && tokens.skip("[")) {
                criterion = tokens.next(TokenType.IDENTIFIER);
                tokens.expect(']');
            }
            tokens.expect(')');
            cmds.accept("advancement " + command + " " + selector + " " + method + " " + adv + " " + criterion);
        },"grant","revoke");
        addSelectorMember((selector, cmds)->{
            tokens.expect('(');
            if (tokens.isNext(")")) {
                cmds.accept("clear " + selector);
            } else {
                String item = parseItemId(true);
                if (tokens.skip("*")) {
                    cmds.accept("clear " + selector + " " + item + " " + tokens.next(TokenType.INT));
                } else {
                    cmds.accept("clear " + selector + " " + item);
                }
            }
        },"clear");
    }

    private void addSelectorMember(BiConsumer<String,Consumer<String>> parser, String... ids) {
        selectorMembers.add(new SelectorMember() {
            @Override
            public String[] getIdentifiers() {
                return ids;
            }

            @Override
            public void parse(String selector, Parser p, Consumer<String> commands) {
                parser.accept(selector,commands);
            }
        });
    }

    public static void pawse(List<Token> towkewnz) {
        new Parser(new TokenIterator(towkewnz)).parse();

        // This is so sad alexa play minecraftcito 2
        // and mine diamonds (death metal cover)
        // so far i got Float.NEGATIVE_INFINITY

        /*HashMap<TokenType[], ParserMethod> parsers = new HashMap<>();
        ArrayList<Token> out = new ArrayList<>();
        for (Method method : Parser.class.getMethods()) {
            ParserPattern pattern = method.getAnnotation(ParserPattern.class);
            if(pattern != null) {
                if(parsers.containsKey(pattern.value())) {
                    throw new RuntimeException("Non Unique Pattern!");
                }
                parsers.put(pattern.value(), new ParserMethod(method, pattern.priority()));
            }
        }

        ArrayList<Token> currentStreak = new ArrayList<>();
        Queue<Token> tokens = new LinkedList<Token>(towkewnz);

        Token current;

        while ((current = tokens.poll()) != null) {
            currentStreak.add(current);
            for (TokenType[] tokenTypes : parsers.keySet()) {
                TokenType[] currentStreakArr = currentStreak.stream().map(Token::getType).toArray(TokenType[]::new);

//                System.out.println("KEY " + Arrays.toString(tokenTypes));
//                System.out.println("SELF" + Arrays.toString(currentStreakArr));

                if(Arrays.equals(tokenTypes, currentStreakArr)) {
                    Token newT = parsers.get(tokenTypes).invoke(currentStreak.toArray(new Token[0]));
                    currentStreak.clear();
                    currentStreak.add(newT);
                }
            }
        }

        System.out.println("OUT" + currentStreak);*/
    }

    private void parse() {
        while (tokens.hasNext()) {
            parseStatement();
            tokens.skip(TokenType.LINE_END);
        }

        System.out.println(">> TICK:");
        for (String c : tickCommands) {
            System.out.println(c);
        }
        for (Map.Entry<String,List<String>> f : functions.entrySet()) {
            System.out.println(">> FUNCTION " + f.getKey());
            for (String c : f.getValue()) {
                System.out.println(c);
            }
        }
    }

    private List<String> parseStatement() {
        List<String> list = new ArrayList<>();
        if (scope == ScopeType.GLOBAL) {
            parseGlobal();
        } else {
            list.addAll(parseNormal());
        }
        return list;
    }

    private void parseGlobal() {
        Token t = tokens.next();
        switch (t.getValue()) {
            case "tick":
                parseTick();
                break;
            case "function": {
                String name = tokens.next(TokenType.IDENTIFIER);
                if (functions.containsKey(name))
                    throw new RuntimeException("Duplicate function " + name);
                tokens.expect('{');
                scope = ScopeType.NORMAL;
                functions.put(name, parseBlock());
                scope = ScopeType.GLOBAL;
                break;
            }
            case "const": {
                String name = tokens.next(TokenType.IDENTIFIER);
                if (consts.containsKey(name))
                    throw new RuntimeException("Duplicate constants " + name);
                tokens.expect('=');
                int value = Integer.parseInt(tokens.next(TokenType.INT));
                consts.put(name, value);
                break;
            }
            case "global": {
                String name = tokens.next(TokenType.IDENTIFIER);
                if (globals.contains(name))
                    throw new RuntimeException("Duplicate globals " + name);
                globals.add(name);
                break;
            }
        }
    }

    private void parseTick() {
        tokens.expect('{');
        tokens.nextLine();
        scope = ScopeType.NORMAL;
        List<String> cmds = parseBlock();
        scope = ScopeType.GLOBAL;
        tickCommands.addAll(cmds);
    }

    private List<String> parseBlock() {
        List<String> list = new ArrayList<>();
        while (!tokens.isNext("}")) {
            list.addAll(parseStatement());
            tokens.skip(TokenType.LINE_END);
        }
        tokens.skip("}");
        return list;
    }

    private List<String> parseNormal() {
        List<String> list = new ArrayList<>();
        String token = tokens.nextValue();
        switch (token){
            case "{":
                list.addAll(parseBlock());
                break;
            case "print":
                list.add("say " + tokens.next(TokenType.STRING));
                break;
            case "if":
                list.addAll(parseIf());
                break;
            case "@":
                list.addAll(parseSelectorCommand());
                break;
            case "bossbar":
                String id = parseResourceLocation(false);
                String displayName = readJsonText();
                list.add("bossbar add " + id + " " + displayName);
                variables.put(id,VariableType.BOSSBAR);
                break;
            case "clone":
                String clone = "clone " + readPosition() + " " + readPosition() + " " + readPosition();
                String block = "";
                if (!tokens.isNext(TokenType.LINE_END)) {
                    if (tokens.skip("no_air","non_air","nonair","masked")) {
                        clone += " masked";
                    } else if (tokens.skip("filter","filtered","only")) {
                        tokens.expect('(');
                        block = parseBlockId(true);
                        tokens.expect(')');
                        clone += " filtered";
                    } else if (tokens.skip("replace","all")) {
                        clone += " replace";
                    } else {
                        throw new RuntimeException("Invalid mask mode for clone command: " + tokens.nextValue());
                    }

                    if (!tokens.isNext(TokenType.LINE_END)) {
                        if (tokens.skip("force","forced","overlap")) {
                            clone += " force";
                        } else if (tokens.skip("move")) {
                            clone += " move";
                        } else if (tokens.skip("normal","copy")) {
                            clone += " normal";
                        } else {
                            throw new RuntimeException("Invalid clone mode for clone command: " + tokens.nextValue());
                        }
                    }
                }
                clone += " " + block;
                list.add(clone);
            default:
                VariableType varType = variables.get(token);
                if (varType != null) {
                    switch (varType) {
                        case BOSSBAR:
                            list.add(parseBossbarCommand(token));
                        default:
                    }
                }
        }
        return list;
    }

    private String parseBossbarCommand(String bossbar) {
        tokens.expect('.');
        String field = tokens.next(TokenType.IDENTIFIER);
        switch (field) {
            case "color":
                tokens.expect('=');
                String color = tokens.expect("blue","green","pink","purple","red","white","yellow");
                return "bossbar set " + bossbar + " color " + color;
            case "max":
                tokens.expect('=');
                int max = Integer.parseInt(tokens.next(TokenType.INT));
                return "bossbar set " + bossbar + " max " + max;
            case "name":
                tokens.expect('=');
                String name = readJsonText();
                return "bossbar set " + bossbar + " name " + name;
            case "players":
                tokens.expect('=');
                tokens.expect('@');
                String selector = parseSelector();
                return "bossbar set " + bossbar + " players " + selector;
            case "style":
                tokens.expect('=');
                String style = tokens.expect("notched_6","notched_10","notched_12","notched_20","progress");
                return "bossbar set " + bossbar + "style " + style;
            case "value":
                tokens.expect('=');
                int value = Integer.parseInt(tokens.next(TokenType.INT));
                return "bossbar set " + bossbar + " value " + value;
            case "visible":
                tokens.expect('=');
                String bool = tokens.expect("true","false");
                return "bossbar set " + bossbar + " visible " + bool;
            case "show":
            case "display":
                tokens.expect('(');tokens.expect(')');
                return "bossbar set " + bossbar + " visible true";
            case "hide":
                tokens.expect('(');tokens.expect(')');
                return "bossbar set " + bossbar + " visible false";
            case "remove":
                tokens.expect('(');tokens.expect(')');
                return "bossbar remove " + bossbar;
        }
        throw new RuntimeException("Unknown bossbar field/command " + field);
    }

    private static final String[] gamemodes = new String[]{"survival","creative","adventure","spectator"};
    private static final Map<String,Integer> INVENTORY_SIZES = new HashMap<String, Integer>(){{
        put("inventory",27);
        put("hotbar",9);
        put("container",54);
        put("enderchest",27);
        put("horse",15);
        put("villager",8);
    }};
    private static final Map<String,String> ARMOR_SLOT_NAMES = new HashMap<String, String>(){{
        put("chestplate","chest");
        put("boots","feet");
        put("leggings","legs");
        put("helmet","head");
    }};

    private List<String> parseSelectorCommand() {
        List<String> cmds = new ArrayList<>();
        String selector = parseSelector();
        if (tokens.skip(".")) {
            String field = tokens.next(TokenType.IDENTIFIER);
            for (SelectorMember m : selectorMembers) {
                for (String id : m.getIdentifiers()) {
                    if (id.equals(field)) {
                        m.parse(selector,this,cmds::add);
                        break;
                    }
                }
            }
            switch (field) {
                case "inventory":
                case "enderchest":
                case "hotbar":
                case "horse":
                case "container":
                case "villager":{
                    tokens.expect('[');
                    int slot = Integer.parseInt(tokens.next(TokenType.INT));
                    if (slot < 0 || slot >= INVENTORY_SIZES.get(field))
                        throw new RuntimeException("Inventory/Enderchest slot index is out of bounds!");
                    tokens.expect(']');
                    tokens.expect('=');
                    String item = parseItemId(false);
                    cmds.add("replaceitem entity " + selector + " " + (field + "." + slot) + " " + item + " " + readOptionalInt());
                    break;
                }
                case "mainhand":
                case "hand":
                case "righthand": {
                    tokens.expect('=');
                    String item = parseItemId(false);
                    cmds.add("replaceitem entity " + selector + " weapon.mainhand " + item + " " + readOptionalInt());
                    break;
                }
                case "offhand":
                case "lefthand": {
                    tokens.expect('=');
                    String item = parseItemId(false);
                    cmds.add("replaceitem entity " + selector + " weapon.offhand " + item + " " + readOptionalInt());
                    break;
                }
                case "boots":
                case "chestplate":
                case "helmet":
                case "leggings": {
                    tokens.expect('=');
                    String item = parseItemId(false);
                    cmds.add("replaceitem entity " + selector + " armor." + ARMOR_SLOT_NAMES.get(field) + " " + item + " " + readOptionalInt());
                    break;
                }
            }
        }
        return cmds;
    }

    private String parseResourceLocation(boolean taggable) {
        String loc = "";
        if (taggable && tokens.skip("#")) {
            loc += "#";
        }
        loc += tokens.next(TokenType.IDENTIFIER);
        boolean checkPath = false;
        if (tokens.skip(":")) {
            loc += ":";
            checkPath = true;
        }
        if (tokens.skip("/") || checkPath) {
            if (!checkPath) {
                loc += "/";
            }
            while (true) {
                loc += tokens.next(TokenType.IDENTIFIER);
                if (tokens.skip("/")) {
                    loc += "/";
                } else {
                    break;
                }
            }
        }
        return loc;
    }

    private int readOptionalInt() {
        if (tokens.isNext(TokenType.INT)) return Integer.parseInt(tokens.next(TokenType.INT));
        return 1;
    }

    private String parseItemId(boolean tag) {
        String id = parseResourceLocation(tag);
        if (tokens.isNext("{")) {
            id += parseNBT();
        }
        return id;
    }

    private Duration parseDuration() {
        Duration d = Duration.ofNanos(0);
        int n = Integer.parseInt(tokens.next(TokenType.INT));
        if (tokens.isNext(TokenType.IDENTIFIER)) {
            while (true) {
                String unit = tokens.next(TokenType.IDENTIFIER);
                switch (unit) {
                    case "s":
                    case "seconds":
                    case "secs":
                        d = d.plusSeconds(n);
                        break;
                    case "t":
                    case "ticks":
                        d = d.plusMillis(n * 50);
                        break;
                    case "m":
                    case "mins":
                    case "minutes":
                        d = d.plusMinutes(n);
                        break;
                    case "h":
                    case "hrs":
                    case "hours":
                        d = d.plusHours(n);
                        break;
                    case "d":
                    case "days":
                        d = d.plusDays(n);
                        break;
                        default:
                            throw new RuntimeException("Invalid duration unit " + unit);
                }
                if (tokens.isNext(TokenType.INT)) {
                    n = Integer.parseInt(tokens.next(TokenType.INT));
                } else {
                    break;
                }
            }
        } else {
            d = Duration.ofSeconds(n);
        }
        return d;
    }

    private static Map<Character,Integer> romanToNumber = new HashMap<Character, Integer>(){{
        put('I',1);
        put('V',5);
        put('X',10);
        put('L',50);
        put('C',100);
        put('D',500);
        put('M',1000);
    }};

    private int readRomanNumber(String roman) {
        int res = 0;
        for (int i = 0; i<roman.length(); i++) {
            int s1 = romanToNumber.get(roman.charAt(i));
            if (i+1 < roman.length()) {
                int s2 = romanToNumber.get(roman.charAt(i+1));
                if (s1 >= s2) {
                    res += s1;
                }
                else {
                    res += s2 - s1;
                    i++;
                }
            }
            else {
                res += s1;
                i++;
            }
        }
        return res;
    }

    private static final List<String> entityIds = Arrays.asList("creeper","skeleton","item","tnt","spider","zombie","ender_dragon");

    private String parseSelector() {
        String target;
        boolean type = false;
        if (tokens.skip("all","any","e","entity","entities")) {
            target = "e";
        } else if (tokens.skip("players","a","everyone","allplayers")) {
            target = "a";
        } else if (tokens.skip("closest","p","nearest","player")) {
            target = "p";
        } else if (tokens.skip("this","self","s","me")) {
            target = "s";
        } else if (tokens.skip("random","r")) {
            target = "r";
        } else if (entityIds.contains(tokens.peek().getValue())) {
            type = true;
            target = "e[type=" + tokens.nextValue();
        } else {
            throw new RuntimeException("Invalid target selector");
        }
        String selector = "@" + target;
        if (tokens.skip("[")) {
            if (type) {
                selector += ",";
            } else {
                selector += "[";
            }
            while (!tokens.skip("]")) {
                String f = tokens.next(TokenType.IDENTIFIER);
                switch (f) {
                    case "name":
                        tokens.expect('=');
                        selector += "name=" + tokens.next(TokenType.STRING);
                        break;
                    case "tag":
                        tokens.expect('=');
                        selector += "tag=" + tokens.next(TokenType.IDENTIFIER);
                        break;
                    case "tags":
                        tokens.expect('=');
                        tokens.expect('(');
                        while (!tokens.skip(")")) {
                            selector += "tag=" + tokens.next(TokenType.IDENTIFIER);
                            tokens.skip(",");
                        }
                        break;
                    case "gm":
                    case "gamemode":
                        tokens.expect("=");
                        if (tokens.isNext(TokenType.INT)) {
                            int index = Integer.parseInt(tokens.next(TokenType.INT));
                            if (index < 0 || index > 3) {
                                throw new RuntimeException("Invalid gamemode index " + index + "must be 0-3");
                            }
                            selector += "gamemode=" + gamemodes[index];
                        } else if (tokens.isNext(TokenType.IDENTIFIER)) {
                            boolean found = false;
                            for (String gm : gamemodes) {
                                if (gm.equalsIgnoreCase(tokens.peek().getValue())) {
                                    tokens.skip();
                                    found = true;
                                    selector += "gamemode=" + gm;
                                    break;
                                }
                            }
                            if (!found) {
                                throw new RuntimeException("Invalid gamemode id " + tokens.peek());
                            }
                            break;
                        }
                    case "scores":
                        break;
                    case "rot":
                    case "rotation":

                }
                if (tokens.skip(",")) {
                    selector += ",";
                } else if (!tokens.isNext("]")) {
                    throw new RuntimeException("Invalid entity selector, expected , or ]");
                }
            }
            selector += "]";
        } else if (type){
            selector += "]";
        }
        return selector;
    }

    private String readPosition() {
        String pos = "";
        for (int i = 0; i < 3; i++) {
            pos += readCoordinate() + " ";
        }
        return pos.trim();
    }

    private String readCoordinate() {
        if (tokens.skip("~")) {
            if (tokens.isNext(TokenType.DOUBLE,TokenType.INT)) return "~" + tokens.nextValue();
            return "~";
        } else if (tokens.skip("^")) {
            if (tokens.isNext(TokenType.DOUBLE,TokenType.INT)) return "^" + tokens.nextValue();
            return "^";
        } else if (tokens.isNext(TokenType.DOUBLE,TokenType.INT)) return tokens.nextValue();
        throw new RuntimeException("Invalid position coordinate!");
    }

    private String parseBlockId(boolean tag) {
        String block = parseResourceLocation(tag);
        boolean hadState = false;
        if (tokens.skip("[")) {
            block += parseState();
            hadState = true;
        }
        if (tokens.isNext("{")) {
            block += parseNBT();
        }
        if (!hadState && tokens.skip("[")) {
            block += parseState();
        }
        return block;
    }

    private String parseNBT() {
        tokens.expect('{');
        String nbt = "{";
        while (!tokens.isNext("}")) {
            System.out.println(tokens.peek());
            nbt += tokens.next(TokenType.IDENTIFIER);
            tokens.expect(':');
            nbt += ":";
            nbt += parseNBTValue();
            System.out.println(nbt);
            if (tokens.skip(",")) {
                nbt += ",";
            } else if (!tokens.isNext("}")) {
                System.out.println(tokens.peek());
                throw new RuntimeException("Expected } or , after NBT entry");
            }
        }
        tokens.skip();
        nbt += "}";
        return nbt;
    }

    private String parseNBTValue() {
        if (tokens.isNext(TokenType.INT,TokenType.DOUBLE)) {
            String v = tokens.nextValue();
            if (tokens.isNext(TokenType.IDENTIFIER)) {
                if (tokens.isNext("d","D","s","S","F","f","B","b")) {
                    v += tokens.nextValue();
                } else {
                    throw new RuntimeException("Invalid number suffix " + tokens.peek().getValue());
                }
            }
            return v;
        } else if (tokens.isNext(TokenType.STRING)) {
            return  "\"" + tokens.nextValue() + "\"";
        } else if (tokens.isNext("{")) {
            return parseNBT();
        } else if (tokens.skip("[")) {
            String arr = "[";
            while (!tokens.isNext("]")) {
                arr += parseNBTValue();
                if (tokens.skip(",")) {
                    arr += ",";
                } else if (!tokens.isNext("]")) {
                    throw new RuntimeException("Expected ] or , after NBT array value");
                }
            }
            tokens.skip();
            arr += "]";
            return arr;
        }
        throw new RuntimeException("Invalid NBT value!");
    }

    private String parseState() {
        String state = "[";
        while (!tokens.isNext("]")) {
            state += tokens.next(TokenType.IDENTIFIER);
            tokens.expect('=');
            state += "=" + tokens.next(TokenType.IDENTIFIER);
            if (tokens.isNext(",")) state += ",";
            if (!tokens.isNext("]",",")) throw new RuntimeException("Invalid block state! expected ] or ,");
        }
        tokens.skip("]");
        state += "]";
        return state;
    }

    private String readJsonText() {
        return "";
    }

    private List<String> parseIf() {
        Condition cond = parseCondition();
        List<String> then = parseStatement();
        String function = generateFunction(then);
        return cond.toCommands(this, function).stream().map(c->"execute " + c).collect(Collectors.toList());
    }

    private Condition parseCondition() {
        System.out.println("parsing cond");
        Token t = tokens.next();
        if (t.getValue().equals("this")) {
            System.out.println("parsed this");
            tokens.expect('.');
            String field = tokens.next(TokenType.IDENTIFIER);
            return parseOperators("@s " + field,false);
        } else if (t.getValue().equals("(")) {
            System.out.println("parsing parenthesis");
            Condition c = parseCondition();
            tokens.expect(')');
            String chain = tokens.peek().getValue();
            switch (chain) {
                case "&&":
                case "||":
                    tokens.skip();
                    return new JoinedCondition(chain,c,parseCondition());
            }
            return c;
        }
        switch (t.getType()) {
            case IDENTIFIER:
                System.out.println("parsing id");
                if (!globals.contains(t.getValue()) && !consts.containsKey(t.getValue()))
                    throw new RuntimeException("Unknown constant " + t.getValue());
                return parseOperators(getVariableAccess(t.getValue()),false);
            case INT:
                System.out.println("parsing literal");
                return parseOperators(t.getValue(),true);
                default:
                    throw new RuntimeException("Invalid token " + t + " in condition");
        }
    }

    // checks if this variable is a const or a local var, and creates a <name> <objective>
    private String getVariableAccess(String name) {
        if (consts.containsKey(name)) {
            return name + " Constants";
        }
        if (globals.contains(name)) {
            return name + " Global";
        }
        return "@s " + name;
    }

    private Condition parseOperators(String first, boolean literal) {
        System.out.println("first token: " + first);
        String op = tokens.peek().getValue();
        switch (op) {
            case "<":
            case "<=":
            case ">":
            case ">=":
                break;
            case "==":
                op = "=";
                break;
                default:
                    return null;
        }
        System.out.println("operator: " + op);
        tokens.skip();
        Token secondTok = tokens.next();
        String second = "";
        boolean secondLiteral = false;
        switch (secondTok.getType()) {
            case IDENTIFIER:
                if (!globals.contains(secondTok.getValue()) && !consts.containsKey(secondTok.getValue()))
                    throw new RuntimeException("Unknown variable " + secondTok.getValue());
                second = getVariableAccess(secondTok.getValue());
                break;
            case INT:
                second = secondTok.getValue();
                secondLiteral = true;
                break;
            default:
                throw new RuntimeException("Invalid token in condition");
        }
        System.out.println("second token: " + second);
        String chain = tokens.peek().getValue();
        System.out.println("chain: " + chain);
        Condition cond = new Condition(new Value(first,literal),op,new Value(second,secondLiteral));
        switch (chain) {
            case "&&":
            case "||":
                tokens.skip();
                return new JoinedCondition(chain,cond,parseCondition());
        }
        return cond;
    }


    public String generateFunction(List<String> commands) {
        String s = "autogenrated" + autoGenerated;
        functions.put(s,commands);
        autoGenerated++;
        return s;
    }
}
