package com.shinysponge.dpscript.project;

import com.shinysponge.dpscript.pawser.CompilationError;
import com.shinysponge.dpscript.pawser.GlobalLaterCheck;
import com.shinysponge.dpscript.tokenizew.CodePos;

import java.util.*;

public class CompilationContext {

    private List<Datapack> imports;
    private Datapack project;
    private Stack<DPFolder> folderStack;
    private DPScript file;

    public Map<String, Integer> consts = new HashMap<>();
    public List<String> bossbars = new ArrayList<>();
    public List<String> objectives = new ArrayList<>();
    public List<String> globals = new ArrayList<>();
    public List<String> triggers = new ArrayList<>();
    private int autoGenerated = 1;
    private List<CompilationError> errors = new ArrayList<>();
    private MCFunction load;
    private MCFunction tick;
    private Map<String, MCFunction> functions = new HashMap<>();
    public List<GlobalLaterCheck> checks = new ArrayList<>();
    private boolean createdConsts;
    private boolean createdGlobal;

    public CompilationContext(Datapack project) {
        this.project = project;
        this.folderStack = new Stack<>();
        this.load = addFunction("init",FunctionType.LOAD);
        this.tick = addFunction("loop",FunctionType.TICK);
    }

    public MCFunction addFunction(String name, FunctionType type) {
        MCFunction f = new MCFunction(project.getName(), name, type);
        functions.put(name,f);
        return f;
    }

    public void pushDirectory(DPFolder folder) {
        folderStack.push(folder);
    }

    public void popDirectory() {
        folderStack.pop();
    }

    public void setFile(DPScript script) {
        this.file = script;
    }

    public DPScript getFile() {
        return file;
    }

    public void addTick(String command) {
        tick.add(command);
    }

    public void addLoad(String command) {
        load.add(command);
    }

    public MCFunction getFunction(String name) {
        return this.functions.get(name.substring(name.indexOf(":")+1));
    }

    public void addError(CompilationError err) {
        errors.add(err);
    }

    public boolean hasConstant(String name) {
        return consts.containsKey(name);
    }

    public boolean hasGlobal(String name) {
        return globals.contains(name);
    }

    public String generateFunctionName() {
        return "autogenerated" + (autoGenerated++);
    }

    public void addFunction(String name, List<String> commands) {
        MCFunction f = addFunction(name,FunctionType.FUNCTION);
        commands.forEach(f::add);
    }

    /**
     * Returns a /function [namespace]:[name] command.
     * if that function doesn't exist, will wait for the end of compilation and will throw a compilation error if it doesn't exist.
     * @param pos The token position of where the function was called
     * @param name The functions name
     */
    public String callFunction(CodePos pos, String name) {
        if (!functions.containsKey(name)) {
            checks.add(new GlobalLaterCheck(name,"function",pos,ctx->ctx.functions.containsKey(name)));
        }
        return "function " + project.getName() + ":" + name;
    }

    public void runChecks() {
        checks.forEach(c->c.check(this));
    }

    public void logResults() {
        if (!errors.isEmpty()) {
            System.out.println(">>>>>>>>>>> COMPILATION FAILED <<<<<<<<<<<<<");
            for (CompilationError e : errors) {
                System.out.println(e.getMessage());
                System.out.println("------------------------");
            }
        } else {
            System.out.println(">>>>>>>>>>>> COMPILATION SUCCEED <<<<<<<<<<<<");
            System.out.println(">> LOAD:");
            load.forEachCommand(System.out::println);
            System.out.println(">> TICK:");
            tick.forEachCommand(System.out::println);
            for (Map.Entry<String, MCFunction> f : functions.entrySet()) {
                System.out.println(">> FUNCTION " + f.getKey());
                f.getValue().forEachCommand(System.out::println);
            }
        }
    }

    public void ensureConstants() {
        if (!createdConsts) {
            addLoad("scoreboard objectives add Consts dummy");
            createdConsts = true;
        }
    }

    public void ensureGlobal() {
        if (!createdGlobal) {
            addLoad("scoreboard objectives add Global dummy");
            createdGlobal = true;
        }
    }

    public String getNamespace() {
        return project.getName();
    }
}
